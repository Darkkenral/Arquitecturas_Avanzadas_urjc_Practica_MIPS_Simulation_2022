import Instruction 


class InstructionParser():
    def __init__(self):
        self.instructionSetType = {
            'r': ['add', 'sub', 'and', 'or','nor','jr','slt'],
            'i': ['addi', 'subi', 'ori',  'beq','bne','lw', 'sw'],
            'j': ['j']
        }    

    def parseFile(self, filename):
        '''
        Creates a parsed list of instructions, preparing them for further processing

        Parameters
        ----------
        filename : [str]
            contains te rute of the txt with the mips code to execute

        Returns
        -------
        [list]
            list of parsed lines from the txt
        '''

        with open(filename) as f:
            data = filter((lambda x: x != '\n'), f.readlines())
            instructions = [self.parse(element) for element in data]
            return instructions

    def parse(self, s:str):
        '''
        Formats the instructions read by code and creates them
        
        Parameters
        ----------
        s : str
            line of the instruction

        Raises
        ------
        ParseError
            Failed to classify the instruction
        '''

        s.replace(',',' ') #just in case the instruction format contains commas
        s = s.split()
        
        instr = s[0]
        
        if instr in self.instructionSetType['r']:
            return self.createRTypeInstruction(s)
        elif instr in self.instructionSetType['i']:
            return self.createITypeInstruction(s)    
        elif instr in self.instructionSetType['j']:
            return self.createJTypeInstruction(s)
        else:
            raise ParseError("Invalid parse instruction")

   
    def createRTypeInstruction(self, s):
        if s[0] == "jr":
            return Instruction(op=s[0], s1 = s[1], regRead = 1, aluop=1)
        return Instruction(op=s[0], dest=s[1], s1=s[2], s2=s[3], regRead=1, regWrite=1, aluop=1)

    def createITypeInstruction(self, s):
        memread = s[0] == "lw" 
        memwrite = s[0] == "sw"
        if (memread or memwrite):
            import re 
            regex = re.compile("(\d+)\((\$r\d+)\)")
            match = regex.match(s[2])
            
            immedval = match.group(1) 
            sval = match.group(2)
            if s[0] == "lw" :
                return Instruction(op=s[0], dest = s[1], s1=sval, immed = immedval, regRead = 1,regWrite = 1, aluop=1,  readMem = 1)
            else :
                return Instruction(op=s[0],  s1 = s[1], s2=sval,immed = immedval, regRead = 1, aluop=1, writeMem = 1)

        if ( s[0] == 'bne' or s[0] == 'beq') :
            return Instruction(op=s[0], s1=s[1] , s2= s[2], immed = s[3], regRead = 1, aluop = 1)
        return Instruction(op=s[0], dest=s[1], s1=s[2], immed=s[3], regRead=1, regWrite=1, aluop=1)

    def createJTypeInstruction(self, s):
        return Instruction(op=s[0], target=s[1])